/*
 Object.keys( )

 E se, por um acaso, eu precise listar somente as chaves de um objeto. Como eu faria isso? ü§î

 A forma mais robusta e elegante de fazer isso √© atrav√©s do m√©todo Object.keys()!

 Object.keys() retorna um array onde os elementos s√£o os nomes das propriedades (chaves üîë) em forma de strings. 
 A ordena√ß√£o destes elementos √© a mesma do objeto original. 
*/

// Sintaxe:
Object.keys('objeto que voc√™ deseja listar as chaves');

//Fant√°stico, n√£o √© mesmo? Vamos ver um exemplo:
const product = {
  name: 'Ruffles Original - 76g',
  price: 8.59,
  company: 'Elma Chips',
  nutritionInfo: {
    carbohydrates: 12,
    sugar: 0,
    sodium: 129,
  }
};

console.log(Object.keys(product)); // [ 'name', 'price', 'company', 'nutritionInfo' ]

/*
Object.values( )

O Object.values() segue a mesma l√≥gica do Object.keys().
A diferen√ßa √© que este retorna um array que cont√©m os valores das propriedades do objeto. 
Voltando ao exemplo anterior, como far√≠amos para retornar os valores de cada propriedade do objeto product em um array?
*/

console.log(Object.values(product));
/*
[
  'Ruffles Original - 76g',
  8.59,
  'Elma Chips',
  { 
    carbohydrates: 12, 
    sugar: 0, 
    sodium: 129 
  }
]
*/

/*
Object.entries( )

No caso do Object.entries, ele retorna um array de arrays, 
no qual cada conjunto tem a chave e o valor do objeto. 
Observe o exemplo a seguir:
*/

console.log(Object.entries(product));

/*
[
  [ 'name', 'Ruffles Original - 76g' ],
  [ 'price', 8.59 ],
  [ 'company', 'Elma Chips' ],
  [ 'nutritionInfo', { carbohydrates: 12, sugar: 0, sodium: 129 } ]
]
*/

/*
 Como voc√™ pode perceber, ao aplicar o Object.entries nesse objeto, o retorno foi um array de arrays. 
 A forma como isso fica n√≠tido √© que n√≥s temos um array abrindo com colchete [ e na linha de baixo j√° tem outro colchete. 
 Como cada colchete abrindo representa um array, √© poss√≠vel saber que temos um array com arrays dentro.

 A primeira entrada de cada array √© a chave do objeto em formato de string,
 e o segundo elemento √© o respectivo valor, que pode ser uma string ou outro tipo de dado. 
 Por exemplo, o valor de price √© um dado do tipo number.
*/