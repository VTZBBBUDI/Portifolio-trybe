/*
Objetos s√£o estruturas ou cole√ß√µes compostas de pares chave-valor. 
√â poss√≠vel armazenar qualquer tipo de dado, at√© mesmo armazenar um objeto dentro de outro ou at√© mesmo dentro de um array. 
Com isso, objetos s√£o estruturas de armazenamento de dados muito poderosas.
*/

const car = {
  brand: 'Fiat',
  model: '500',
  color: 'White',
  weight: 1061,
};

/* Para acessar as chaves dentro de um objeto, h√° dois modos:
‚Ä¢ Dot Notation (Nota√ß√£o de ponto): car.brand;
‚Ä¢ Bracket Notation (Nota√ß√£o de colchetes): car['brand'].
*/

/*
 Objeto dentro de objeto:
   Manipula√ß√£o de objeto dentro de objeto, que a partir de agora chamaremos de objetos aninhados,
   √© algo muito comum no desenvolvimento de software, 
   pois nos d√° a possibilidade de representar melhor as informa√ß√µes.
   No objeto account abaixo, o valor da chave bank guarda outro objeto:
*/

const account = {
  agency: '0975',
  bank: {
    cod: '012',
    id: 4,
    name: 'TrybeBank',
  },
};

//Para acessar o objeto bank, devemos antes acessar o objeto account:

// Com nota√ß√£o por ponto
console.log(account.bank); // Resultado do log: {cod: '012', id: 4, name: 'TrybeBank'}

// Com nota√ß√£o por colchetes
console.log(account['bank']); // Resultado do log: {cod: '012', id: 4, name: 'TrybeBank'}

/*
Se voc√™ quiser acessar o valor da propriedade name que est√° dentro da propriedade bank,
ser√° preciso acessar o objeto account primeiro, seguido do objeto bank, 
seguido da propriedade name:
*/

// Com nota√ß√£o por ponto
console.log(account.bank.name); // Resultado do log: TrybeBank

// Com nota√ß√£o por colchetes
console.log(account['bank']['name']); // Resultado do log: TrybeBank

/*
 Objeto dentro de objeto dentro de objeto
Neste outro exemplo, veja como acessamos as informa√ß√µes de modo encadeado:
*/

const user = {
  id: 99,
  email: 'jakeperalta@gmail.com',
  info: {
    name: 'Jake',
    lastName: 'Peralta',
    address: {
      street: 'Rua Dalvo Trombeta, 357 - Fundos',
      district: 'Xerer√™',
      city: 'Santana do Livramento',
      state: 'Rio Grande do Norte',
    },
  },
};
console.log(user['id']); // 99
console.log(user.email); // jakeperalta@gmail.com
console.log(user.info.address.street); // Rua Dalvo Trombeta, 357 - Fundos
console.log(user['info']['address']['city']); // Santana do Livramento

/*
 Podemos ‚Äúler‚Äù o objeto user da seguinte forma:

O objeto desse exemplo tem a chave info, cujo valor √© outro objeto que possui tr√™s chaves, 
uma delas sendo address, que √© outro objeto. 
Ou seja, o objeto user possui outros dois objetos dentro dele.
*/

/*
 Objeto dentro de um array

Agora, e se o objeto estiver dentro de um array, como acessar as propriedades dele?
Esse bloco de c√≥digo √© um exemplo de um array composto de objetos. 
Esses objetos podem ser acessados por meio de seus √≠ndices e armazenados dentro de vari√°veis para facilitar a compreens√£o.
    De olho na dica üëÄ: Se o objeto estiver dentro de um array, ele ser√° acessado por meio de seu √≠ndice,
     assim como uma informa√ß√£o seria acessada em um array de strings.
*/

const residents = [
  {
    name: 'Lu√≠za',
    lastName: 'Guimar√£es',
    floor: 10,
    apartment: 1005,
  },
  {
    name: 'William',
    lastName: 'Albuquerque',
    floor: 5,
    apartment: 502,
  },
  {
    name: 'Murilo',
    lastName: 'Ferraz',
    floor: 8,
    apartment: 804,
  },
  {
    name: 'Zoey',
    lastName: 'Brooks',
    floor: 1,
    apartment: 101,
  },
];

const firstResident = residents[0];
console.log(firstResident); // Resultado do log: { name: 'Lu√≠za', lastName: 'Guimar√£es', floor: 10, apartment: 1005 }
//E se voc√™ precisar acessar a propriedade que guarda o valor do andar que a pessoa mora?
console.log(firstResident.floor); // Resultado do log: 10

//E como descobrir quem √© o √∫ltimo residente do array?
const lastResident = residents[residents.length - 1];
console.log(lastResident); // Resultado do log: { name: 'Zoey', lastName: 'Brooks', floor: 1, apartment: 101 }



//Tamb√©m √© poss√≠vel fazer opera√ß√µes um pouco mais complexas, como fazer o log de todas as pessoas residentes atrav√©s do loop for:
for (let index = 0; index < residents.length; index += 1) {
  const resident = residents[index];
  console.log(resident.name);
};