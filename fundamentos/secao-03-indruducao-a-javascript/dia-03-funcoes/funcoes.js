/*
Segundo o MDN, fun√ß√£o √© um conjunto de instru√ß√µes que executa uma tarefa ou calcula um valor.
Fun√ß√µes s√£o a forma mais essencial de organiza√ß√£o de c√≥digo e de l√≥gica na programa√ß√£o. Ao utiliz√°-las, voc√™ consegue dividir seu c√≥digo em blocos l√≥gicos e deixar as coisas mais organizadas.
Com isso, √© poss√≠vel diminuir o tamanho de seu c√≥digo, diminuir a repeti√ß√£o e tornar mais f√°cil a leitura e o entendimento, pois a l√≥gica do programa estar√° bem dividida.
Exemplo de fun√ß√£o de boas-vindas √† Trybe:
*/

function giveGreeting() {
  return `Ol√°, boas-vindas √† Trybe!`;
};

/*

‚Ä¢ function √© uma palavra reservada do JavaScript, onde deixamos expl√≠cito que iremos declarar uma fun√ß√£o;
‚Ä¢ giveGreeting √© o nome da fun√ß√£o. Neste caso utilizamos o nome giveGreeting para deixar n√≠tido que a fun√ß√£o ir√° dar uma sauda√ß√£o;
‚Ä¢ () dentro dos par√™nteses √© onde definimos os par√¢metros da fun√ß√£o. Eles s√£o uma esp√©cie de ‚Äúvari√°veis‚Äù utilizadas para passar informa√ß√µes para dentro da fun√ß√£o, caso necess√°rio;
‚Ä¢ { } os colchetes delimitam o escopo da fun√ß√£o. √â o ‚Äúcorpo‚Äù que cont√©m o que a ser executado;
‚Ä¢ return √© uma palavra-chave reservada do JavaScript que indica que a fun√ß√£o deve retornar um valor quando √© chamada. Logo ap√≥s retornado um valor, a fun√ß√£o se encerra. No nosso exemplo, estamos retornando a string ‚ÄúOl√°, boas-vindas √† Trybe!‚Äù.

*/
/*

De olho na dica üëÄ: Fun√ß√µes executam um conjunto de a√ß√µes. 
A√ß√µes, na gram√°tica, s√£o verbos (ex.: pegar, recuperar, formatar, requisitar, apagar, etc). 
Portanto, √© uma boa pr√°tica dar um nome para a fun√ß√£o come√ßando com um verbo. 
Al√©m disso, assim como nas vari√°veis, as fun√ß√µes tamb√©m s√£o nomeadas no padr√£o camelCase. 

*/

/*
Fun√ß√µes com par√¢metros
  Qualquer valor pode ser passado como par√¢metro em uma fun√ß√£o JavaScript. 
  Pode-se passar booleanos, arrays e outros valores, at√© mesmo outras fun√ß√µes, como par√¢metro.
  No exemplo a seguir, h√° uma lista de pessoas clientes do TrybeBank salva em um array. 
  Vamos pass√°-la como par√¢metro de nossa fun√ß√£o.
*/

const trybeBankCustomers = ['Oliva', 'Nat', 'Gus'];
function greetCustomer(customer) {
  return `Ol√°, ${customer}. Essa √© sua conta do TrybeBank.`;
};
console.log(greetCustomer(trybeBankCustomers)); // Ol√°, Oliva,Nat,Gus. Essa √© sua conta do TrybeBank.

//E se eu quisesse mandar uma mensagem individual para cada pessoa cliente?? 

const trybeBankCustomers2 = ['Oliva', 'Nat', 'Gus'];

function greetCustomer(customer) {
  for (let index = 0; index < customer.length; index += 1) {
    console.log(`Ol√°, ${customer[index]}. Essa √© sua conta do TrybeBank.`);
  }
};
greetCustomer(trybeBankCustomers2);

/*
Nesse caso, como utilizamos console.log() dentro da fun√ß√£o, 
n√£o foi preciso usar return nem fazer a chamada da fun√ß√£o dentro de um console.log() para imprimir.
*/