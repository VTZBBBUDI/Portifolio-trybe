/*
 √â muito comum termos a necessidade de adicionar novas propriedades a objetos. 
 Vamos ver como fazer isso?

 Suponha que voc√™ fique respons√°vel por cadastrar clientes de uma loja.
 Para salvar as informa√ß√µes de cada cliente, voc√™ criou um objeto como o deste exemplo:
*/

const customer = {
  firstName: 'Roberto',
  age: 22,
  job: 'Software Engineer',
};

/*
  O objeto tem as propriedades firstName, age e job. Por√©m, voc√™ se esqueceu de adicionar a propriedade lastName.

  E agora, como √© poss√≠vel adicionar uma nova propriedade ao objeto? ü§î
  
  Para isso, basta atribuir a ela um valor com a chave desejada. 
  Caso a propriedade acessada ainda n√£o exista no objeto, ela ser√° criada automaticamente. 
  Portanto, caso seja necess√°rio adicionar a propriedade lastName ao objeto, a nota√ß√£o em ponto ou a em colchetes pode ser utilizada.
*/

const customer2 = {
  firstName: 'Roberto',
  age: 22,
  job: 'Software Engineer',
};
customer.lastName = 'Faria';
console.log(customer2); 

customer['lastName'] = 'Silva';
console.log(customer2);

/*
 Adicionar propriedades atrav√©s de fun√ß√£o

 Agora, suponha que, ap√≥s terminar de adicionar o lastName da pessoa no objeto, 
 sua lideran√ßa lhe informa que ser√° necess√°rio adicionar tamb√©m a naturalidade (birthPlace),
 a data de nascimento (birthDate) e o estado civil (maritalStatus).
*/

/*
 Como voc√™ faria? ü§î

 N√≥s podemos utilizar a nota√ß√£o de colchete ou de ponto, 
 mas √© uma √≥tima oportunidade para utilizarmos duas boas pr√°ticas de c√≥digo: 
 criar c√≥digos reaproveit√°veis e sem√¢nticos.

 N√≥s conseguimos criar uma fun√ß√£o respons√°vel por adicionar novas propriedades a um objeto apenas caso elas n√£o existam. 
 Dessa forma podemos adicionar quantas propriedades quisermos, de forma din√¢mica, sem sobrescrever nenhuma informa√ß√£o.

 No nosso exemplo, a fun√ß√£o deve receber tr√™s par√¢metros:
    1.O objeto a ser trabalhado;
    2.Uma nova chave a ser adicionada;
    3.O valor dessa chave.
*/

const customer = {
  firstName: 'Roberto',
  age: 22,
  job: 'Software Engineer',
};

// Cria√ß√£o da fun√ß√£o
const addProperty = (object, key, value) => {
  if (typeof object[key] === "undefined"){
    object[key] = value;
  }
};

// Chamada da fun√ß√£o passando os valores dos par√¢metros
addProperty(customer, 'birthPlace', '19/07/1932');

// Exibe o objeto transformado
console.log(customer);

/*
Agora, sempre que voc√™ quiser adicionar uma nova propriedade sem correr o risco de substituir algum valor existente, 
basta chamar a fun√ß√£o addProperty e passar os valores dos par√¢metros necess√°rios.
*/